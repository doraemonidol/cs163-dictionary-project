<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="backToMenu.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AABMyB57/BfaXmmDyCFcpAAAAABJRU5ErkJggg==
</value>
  </data>
</root>