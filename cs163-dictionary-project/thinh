void ViewFavoriteList(TrieNode* root, string str, int level, Node FList[], int num)
{
    if (isLeafNode(root)) {
        str[level] = '\0';
        FList[num].word = str;
        FList[num].content = root->content;
        num++;
        //cout << str << " " << root->content << endl;
    }

    for (int i = 0; i < 128; i++) {
        if (root->children[i]) {
            str[level] = i;
            ViewFavoriteList(root->children[i], str, level + 1, FList, num);
        }
    }
}

FullDictTree ChooseDataSet(TrieNode* key, TrieNode* def, string datasetName, int& wordcount)
{
    RemoveAll(key);
    RemoveAll(def);
    key = nullptr;
    def = nullptr;
    InitializeTrie(key, def, datasetName, wordcount);
    FullDictTree dict;
    dict.key = key;
    dict.def = def;
    ofstream f(DATA_DIR + "fantastic4.txt");
    f << datasetName << endl;
    f.close();
    return dict;
}

//void FileToTrie(ifstream& f, TrieNode*& trie, int &wordCount) {
//    if (f.eof()) return;
//    string s;
//    wordCount = 0;
//    trie = getNode();
//    TrieNode* pCur;
//    stack<TrieNode*> st;
//    st = stack<TrieNode*>();
//    st.push(trie);
//    while (getline(f, s)) {
//        pCur = trie;
//        //cout << s << " " << wordCount << endl;
//        for (char c : s) {
//            if (c == 9) { //tab character
//                //cout << st.size() << "<<\n";
//                pCur = st.top();
//                st.pop();
//            } else {
//                //cout << st.size() << "<<\n";
//                pCur->children[c] = getNode();
//                pCur->childcount++;
//                st.push(pCur);
//                pCur = pCur->children[c];
//            }
//        }
//        getline(f, s);
//        pCur->content = s;
//        pCur->isEndOfWord = true;
//        wordCount++;
//    }
//}
